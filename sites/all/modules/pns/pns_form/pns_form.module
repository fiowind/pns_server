<?php
module_load_include('inc', 'pns_form');
module_load_include('inc', 'pns_form', 'handler_submit');
module_load_include('inc', 'pns_form', 'handler_update');
module_load_include('inc', 'pns_form', 'handler_validate');
module_load_include('inc', 'pns_form', 'handler_delete');
module_load_include('inc', 'pns_form', 'handler_alter');

function pns_form_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['indicator_preview'] = array(
    //'variables' => array('renderer' => NULL, 'region' => NULL, 'content_type' => NULL),
    // 'arguments' => array('form' => NULL),
    'render element' => 'element',
    'path' => drupal_get_path('module', 'pns_form') . '/theme',
    'template' => 'field_indicator_preview',    
    //'file' => '../includes/add-content.inc',    
  );
  $theme['popup_preview'] = array(
    //'variables' => array('renderer' => NULL, 'region' => NULL, 'content_type' => NULL),
    // 'arguments' => array('form' => NULL),
    'render element' => 'element',
    'path' => drupal_get_path('module', 'pns_form') . '/theme',
    'template' => 'field_popup_preview',    
    //'file' => '../includes/add-content.inc',    
  );
  return $theme;
}

function pns_form_init() {
  if (($_GET['q'] == 'system/ajax' || strstr($_GET['q'], 'file/ajax/')) && preg_match('/^[0-9a-zA-Z_]+_node_form/', $_POST['form_id'])) {
    module_load_include('inc', 'node', 'node.pages');
  }
}

function pns_form_cron() {
}

function pns_form_cronapi($op, $function = NULL) {
  switch($op) {
    case 'list':
      return array(
        'check_and_move_push_channel' => 'check_and_move_push_channel',
      );

    case 'rule':
      switch($function) {
        case 'check_and_move_push_channel': return '* * * * *';
      }
      break;
    case 'execute':
      switch($function) {
        case 'check_and_move_push_channel':
          _check_and_move_push_channel();
          _count_summary();
          break;
      }
      break;
  }
}

function _count_summary(){
	//get published campaign list
	$campaign_list = views_get_view_result('list_campagin', 'panel_pane_3');
	foreach($campaign_list as $campaign){
		$campaign_nid = $campaign->nid;
		$campaign_result_nid = $campaign->field_ref_campaign_node_nid;
		$campaign_result_node = node_load($campaign_result_nid);

		//direct
		$result = db_query('SELECT p.status, count(*) as count FROM {push_direct} p WHERE p.campaign_id = :cid GROUP BY p.status', array(':cid' => $campaign_nid));
		
		$direct_count = array(
			'trying' => 0,
			'sent' => 0,
			'failed' => 0,
			'received' => 0,
			'read' => 0
		);
		
		foreach ($result as $record) {
			$status = $record->status;
			$count = intval($record->count);
			
			switch($status){
				case  "requesting" :
				case  "requested" :
				case  "retrying" :
				case  "offline" :
					$direct_count['trying'] = $direct_count['trying'] + $count;
				break;
				
				case  "success" :
					$direct_count['sent'] = $direct_count['sent'] + $count;
				break;

				case  "failed" :
				case  "moved" :
				case  "blocked" :
					$direct_count['failed'] = $direct_count['failed'] + $count;
				break;

				case  "received" :
					$direct_count['received'] = $direct_count['received'] + $count;
				break;
				case  "read" :
					$direct_count['read'] = $direct_count['read'] + $count;
				break;
			}
		}

		$campaign_result_node->field_direct_trying['und'][0]['value'] = $direct_count['trying'];
		$campaign_result_node->field_direct_sent['und'][0]['value'] = $direct_count['sent'];
		$campaign_result_node->field_direct_failed['und'][0]['value'] = $direct_count['failed'];
		$campaign_result_node->field_direct_received['und'][0]['value'] = $direct_count['received'];
		$campaign_result_node->field_direct_read['und'][0]['value'] = $direct_count['read'];

		// gcm
		$result = db_query('SELECT p.status, count(*) as count FROM {push_gcm} p WHERE p.campaign_id = :cid GROUP BY p.status', array(':cid' => $campaign_nid));
		
		$gcm_count = array(
			'trying' => 0,
			'sent' => 0,
			'failed' => 0,
			'received' => 0,
			'read' => 0
		);
		
		foreach ($result as $record) {
			$status = $record->status;
			$count = intval($record->count);
			
			switch($status){
				case  "requesting" :
				case  "requested" :
				case  "retrying" :
				case  "offline" :
					$gcm_count['trying'] = $gcm_count['trying'] + $count;
				break;
				
				case  "success" :
					$gcm_count['sent'] = $gcm_count['sent'] + $count;
				break;

				case  "failed" :
				case  "moved" :
				case  "blocked" :
					$gcm_count['failed'] = $gcm_count['failed'] + $count;
				break;

				case  "received" :
					$gcm_count['received'] = $gcm_count['received'] + $count;
				break;
				case  "read" :
					$gcm_count['read'] = $gcm_count['read'] + $count;
				break;
			}
		}

		$campaign_result_node->field_gcm_trying['und'][0]['value'] = $gcm_count['trying'];
		$campaign_result_node->field_gcm_sent['und'][0]['value'] = $gcm_count['sent'];
		$campaign_result_node->field_gcm_failed['und'][0]['value'] = $gcm_count['failed'];
		$campaign_result_node->field_gcm_received['und'][0]['value'] = $gcm_count['received'];
		$campaign_result_node->field_gcm_read['und'][0]['value'] = $gcm_count['read'];

		// sms
		$result = db_query('SELECT count(*) as count FROM {push_sms} p WHERE p.campaign_id = :cid', array(':cid' => $campaign_nid));
		foreach ($result as $record) {
			$campaign_result_node->field_sms_sent['und'][0]['value'] = intval($record->count);
		}

		//save result
		node_save($campaign_result_node);
	}
}

function _check_and_move_push_channel(){
	$maximum_retry_cnt = 5;

	$status_failed = 'failed';
	$status_requesting = 'requesting';
	$status_moved = 'moved';
	$status_blocked = 'blocked';

	//find direct and move them to gcm
	$view_result = views_get_view_result('push_direct', 'panel_pane_1',$status_failed);

	foreach($view_result as $item){
		$old_entity = entity_load('data_push_direct',array('0' => $item->tid));
		$old_entity = array_shift($old_entity);

		if(isset($old_entity->gcm_api_key) && isset($old_entity->push_token)){
			//update existing entity's status
			$old_entity->status = $status_moved;
			entity_save('data_push_direct', $old_entity);

			//insert new gcm
			$new_entity = new stdClass();
			$new_entity->entity_type = 'data_push_gcm';
			$new_entity->data_table = 'push_gcm';

			$new_entity->target = 'GCM';
			$new_entity->api_key = $old_entity->gcm_api_key;
			$new_entity->push_token = $old_entity->push_token;
			$new_entity->maximum_retry_cnt = $maximum_retry_cnt;
			$new_entity->attempted_retry_cnt = 0;

			// $new_entity->text = $old_entity->text;
			$new_entity->text = str_replace("/direct/", "/gcm", $old_entity->text);
			$new_entity->url = str_replace("/direct/", "/gcm/",$old_entity->url);

			$new_entity->requested_at = $old_entity->requested_at;
			$new_entity->scheduled_at = $old_entity->scheduled_at;
			$new_entity->status = $status_requesting;

			$new_entity->sms_sender_mdn = $old_entity->sms_sender_mdn;
			$new_entity->sms_callback_mdn = $old_entity->sms_callback_mdn;
			$new_entity->sms_receiver_mdn = $old_entity->sms_receiver_mdn;
			$new_entity->sms_text = $old_entity->sms_text;
			$new_entity->send_sms = $old_entity->send_sms;

			$new_entity->campaign_id = $old_entity->campaign_id;

			$new_entity->field_ref_campaign['und'][0]['target_id'] = $old_entity->field_ref_campaign['und'][0]['target_id'];
			$new_entity->field_ref_app_client['und'][0]['target_id'] = $old_entity->field_ref_app_client['und'][0]['target_id'];

			entity_save('data_push_gcm', $new_entity);
		}else{
			$old_entity->status = $status_blocked;
			entity_save('data_push_direct', $old_entity);
		}
	}
	
	//find gcm and move them to sms
	$view_result = views_get_view_result('push_gcm', 'panel_pane_2', $status_failed);

	foreach($view_result as $item){
		$old_entity = entity_load('data_push_gcm',array('0' => $item->tid));
		$old_entity = array_shift($old_entity);

		if(isset($old_entity->sms_receiver_mdn) && isset($old_entity->sms_text) && $old_entity->send_sms == 1){
			//update existing entity's status
			$old_entity->status = $status_moved;
			entity_save('data_push_gcm', $old_entity);

			//insert new gcm
			$new_entity = new stdClass();
			$new_entity->entity_type = 'data_push_sms';
			$new_entity->data_table = 'push_sms';

			$new_entity->target = 'SMS';
			$new_entity->maximum_retry_cnt = $maximum_retry_cnt;
			$new_entity->attempted_retry_cnt = 0;

			$new_entity->requested_at = $old_entity->requested_at;
			$new_entity->scheduled_at = $old_entity->scheduled_at;
			$new_entity->status = $status_requesting;

			$new_entity->sender_mdn = $old_entity->sms_sender_mdn;
			$new_entity->callback_mdn = $old_entity->sms_callback_mdn;
			$new_entity->receiver_mdn = $old_entity->sms_receiver_mdn;
			$new_entity->text = $old_entity->sms_text;

			$new_entity->campaign_id = $old_entity->campaign_id;
			
			$new_entity->field_ref_campaign['und'][0]['target_id'] = $old_entity->field_ref_campaign['und'][0]['target_id'];
			$new_entity->field_ref_app_client['und'][0]['target_id'] = $old_entity->field_ref_app_client['und'][0]['target_id'];

			entity_save('data_push_sms', $new_entity);
		}else{
			$old_entity->status = $status_blocked;
			entity_save('data_push_gcm', $old_entity);
		}
	}
}

?>
